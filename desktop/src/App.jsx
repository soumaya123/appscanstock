import React, { useState, useEffect } from 'react';import {  ThemeProvider,  CssBaseline,  Box,  Snackbar,  Alert} from '@mui/material';// Configuration et thèmeimport theme from './theme';import { storage, STORAGE_KEYS } from './utils/helpers';// Composantsimport {  LoginForm,  Header,  Sidebar,  Dashboard,  ProductsTable} from './components';// Servicesimport { authService } from './services/api';function App() {  // États principaux  const [user, setUser] = useState(null);  const [loading, setLoading] = useState(true);  const [sidebarOpen, setSidebarOpen] = useState(true);  const [selectedMenu, setSelectedMenu] = useState('dashboard');    // États pour les notifications  const [snackbar, setSnackbar] = useState({     open: false,     message: '',     severity: 'success'   });  // Vérification de l'authentification au démarrage  useEffect(() => {    const checkAuth = async () => {      try {        const token = storage.get(STORAGE_KEYS.TOKEN);        const savedUser = storage.get(STORAGE_KEYS.USER);                if (token && savedUser) {          setUser(JSON.parse(savedUser));        }      } catch (error) {        console.error('Erreur lors de la vérification de l\'authentification:', error);        // Nettoyer les données corrompues        storage.remove(STORAGE_KEYS.TOKEN);        storage.remove(STORAGE_KEYS.USER);      } finally {        setLoading(false);      }    };    checkAuth();  }, []);  // Gestion de la connexion  const handleLogin = async (credentials) => {    try {      const result = await authService.login(credentials.username, credentials.password);            if (result.access_token) {        const userData = { username: credentials.username };        storage.set(STORAGE_KEYS.USER, JSON.stringify(userData));        setUser(userData);                showSnackbar('Connexion réussie !', 'success');        return { success: true };      }    } catch (error) {      console.error('Erreur de connexion:', error);      showSnackbar('Erreur de connexion. Vérifiez vos identifiants.', 'error');      return { success: false, error: error.message };    }  };  // Gestion de la déconnexion  const handleLogout = () => {    authService.logout();    setUser(null);    setSelectedMenu('dashboard');    showSnackbar('Déconnexion réussie', 'info');  };  // Gestion des notifications  const showSnackbar = (message, severity = 'success') => {    setSnackbar({ open: true, message, severity });  };  const handleCloseSnackbar = () => {    setSnackbar(prev => ({ ...prev, open: false }));  };  // Rendu du contenu principal  const renderMainContent = () => {    switch (selectedMenu) {      case 'dashboard':        return <Dashboard />;      case 'products':        return <ProductsTable onShowSnackbar={showSnackbar} />;      default:        return <Dashboard />;    }  };  // Interface de chargement  if (loading) {    return (      <ThemeProvider theme={theme}>        <CssBaseline />        <Box           display="flex"           justifyContent="center"           alignItems="center"           minHeight="100vh"        >          Chargement...        </Box>      </ThemeProvider>    );  }  // Interface de connexion  if (!user) {    return (      <ThemeProvider theme={theme}>        <CssBaseline />        <LoginForm onLogin={handleLogin} />                {/* Notifications */}        <Snackbar          open={snackbar.open}          autoHideDuration={6000}          onClose={handleCloseSnackbar}          anchorOrigin={{ vertical: 'top', horizontal: 'right' }}        >          <Alert             onClose={handleCloseSnackbar}             severity={snackbar.severity}            variant="filled"          >            {snackbar.message}          </Alert>        </Snackbar>      </ThemeProvider>    );  }  // Interface principale de l'application  return (    <ThemeProvider theme={theme}>      <CssBaseline />      <Box sx={{ display: 'flex', minHeight: '100vh' }}>        {/* Sidebar */}        <Sidebar          open={sidebarOpen}          selectedMenu={selectedMenu}          onMenuSelect={setSelectedMenu}        />        {/* Contenu principal */}        <Box component="main" sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column' }}>          {/* Header */}          <Header            user={user}            sidebarOpen={sidebarOpen}            onToggleSidebar={() => setSidebarOpen(!sidebarOpen)}            onLogout={handleLogout}          />          {/* Contenu de la page */}          <Box sx={{ flexGrow: 1, p: 3 }}>            {renderMainContent()}          </Box>        </Box>      </Box>      {/* Notifications */}      <Snackbar        open={snackbar.open}        autoHideDuration={6000}        onClose={handleCloseSnackbar}        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}      >        <Alert           onClose={handleCloseSnackbar}           severity={snackbar.severity}          variant="filled"        >          {snackbar.message}        </Alert>      </Snackbar>    </ThemeProvider>  );}export default App;