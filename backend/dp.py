"""
Script d'initialisation pour cr√©er des entr√©es et sorties de stock d'exemple
"""
import asyncio
import random
from datetime import datetime, timedelta
from sqlalchemy.orm import Session
from app.database import SessionLocal, engine, Base, User, Product
from app.models import StockEntry, StockExit   # Assurez-vous que vos mod√®les existent

NUM_ENTRIES = 2000
NUM_EXITS = 2000


async def create_sample_stock_entries():
    """Cr√©er des entr√©es de stock (stock_in) d'exemple"""
    db = SessionLocal()
    try:
        products = db.query(Product).all()
        admin = db.query(User).filter(User.is_admin == True).first()

        if not products or not admin:
            print("‚ùå Pas de produits ou utilisateur admin trouv√©. Abandon.")
            return

        existing = db.query(StockEntry).count()
        if existing > 0:
            print(f"{existing} entr√©es de stock d√©j√† pr√©sentes")
            return

        print(f"üì¶ G√©n√©ration de {NUM_ENTRIES} entr√©es de stock...")

        for i in range(NUM_ENTRIES):
            product = random.choice(products)
            entry = StockEntry(
                date_reception=datetime.now() - timedelta(days=random.randint(1, 365)),
                num_reception=f"REC-{i+1:05d}",
                num_reception_carnet=f"CARN-{i+1:05d}",
                num_facture=f"FACT-{random.randint(1000, 9999)}",
                num_packing_liste=f"PACK-{random.randint(1000, 9999)}",
                product_id=product.id,
                qte_kg=round(random.uniform(5.0, 200.0), 2),
                qte_cartons=random.randint(1, 50),
                date_peremption=datetime.now() + timedelta(days=random.randint(30, 365)),
                remarque="Entr√©e auto-g√©n√©r√©e",
                created_by=admin.id,
            )
            db.add(entry)

            if i % 200 == 0:
                db.commit()  # Commit par batch pour √©viter surcharge m√©moire

        db.commit()
        print("‚úÖ Entr√©es de stock g√©n√©r√©es avec succ√®s")

    except Exception as e:
        print(f"Erreur lors de la cr√©ation des entr√©es de stock: {e}")
        db.rollback()
    finally:
        db.close()


async def create_sample_stock_exits():
    """Cr√©er des sorties de stock (stock_out) d'exemple"""
    db = SessionLocal()
    try:
        products = db.query(Product).all()
        admin = db.query(User).filter(User.is_admin == True).first()

        if not products or not admin:
            print("‚ùå Pas de produits ou utilisateur admin trouv√©. Abandon.")
            return

        existing = db.query(StockExit).count()
        if existing > 0:
            print(f"{existing} sorties de stock d√©j√† pr√©sentes")
            return

        print(f"üì¶ G√©n√©ration de {NUM_EXITS} sorties de stock...")

        for i in range(NUM_EXITS):
            product = random.choice(products)
            exit_item = StockExit(
                date_sortie=datetime.now() - timedelta(days=random.randint(1, 365)),
                num_facture=f"FACT-{random.randint(1000, 9999)}",
                product_id=product.id,
                qte_kg=round(random.uniform(5.0, 200.0), 2),
                qte_cartons=random.randint(1, 50),
                date_peremption=datetime.now() + timedelta(days=random.randint(10, 365)),
                prix_vente=round(random.uniform(10.0, 300.0), 2),
                type_sortie=random.choice(["Vente", "Don", "Retour"]),
                remarque="Sortie auto-g√©n√©r√©e",
                created_by=admin.id,
            )
            db.add(exit_item)

            if i % 200 == 0:
                db.commit()

        db.commit()
        print("‚úÖ Sorties de stock g√©n√©r√©es avec succ√®s")

    except Exception as e:
        print(f"Erreur lors de la cr√©ation des sorties de stock: {e}")
        db.rollback()
    finally:
        db.close()


async def main():
    print("üöÄ Initialisation des mouvements de stock...")

    # G√©n√©rer stock_in
    await create_sample_stock_entries()

    # G√©n√©rer stock_out
    await create_sample_stock_exits()

    print("üéâ Donn√©es de stock g√©n√©r√©es avec succ√®s")


if __name__ == "__main__":
    asyncio.run(main())
